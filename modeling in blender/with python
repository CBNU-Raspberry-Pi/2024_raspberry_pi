import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk
import math

class ImageMeasureApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Image Measurement App")

        self.canvas = tk.Canvas(root, cursor="cross")
        self.canvas.pack(fill=tk.BOTH, expand=True)

        self.start_point = None
        self.end_point = None
        self.current_line = None

        # 이미지 불러오기 버튼
        load_button = tk.Button(root, text="Load Image", command=self.load_image)
        load_button.pack(side=tk.BOTTOM)

        # 좌표 저장 버튼
        save_button = tk.Button(root, text="Save Coordinates", command=self.save_coordinates)
        save_button.pack(side=tk.BOTTOM)

        # 모든 선과 데이터를 지우는 버튼
        clear_button = tk.Button(root, text="Clear", command=self.clear_all)
        clear_button.pack(side=tk.BOTTOM)

        self.coordinates = []  # 좌표 저장을 위한 리스트

        self.canvas.bind("<Button-1>", self.on_click)
        self.canvas.bind("<B1-Motion>", self.on_drag)
        self.canvas.bind("<ButtonRelease-1>", self.on_release)

    def load_image(self):
        file_path = filedialog.askopenfilename()
        if not file_path:
            return

        self.image = Image.open(file_path)
        self.tk_image = ImageTk.PhotoImage(self.image)
        self.canvas.create_image(0, 0, anchor=tk.NW, image=self.tk_image)
        self.canvas.config(scrollregion=self.canvas.bbox(tk.ALL))

    def on_click(self, event):
        self.start_point = (event.x, event.y)

    def on_drag(self, event):
        if self.start_point:
            if self.current_line:
                self.canvas.delete(self.current_line)
            self.current_line = self.canvas.create_line(self.start_point[0], self.start_point[1], event.x, event.y, fill="red")

    def on_release(self, event):
        self.end_point = (event.x, event.y)
        self.coordinates.append((self.start_point, self.end_point))  # 좌표 추가
        if self.current_line:
            self.canvas.delete(self.current_line)
        if self.start_point and self.end_point:
            self.measure_distance()
        self.start_point = None
        self.end_point = None
        self.current_line = None

    def measure_distance(self):
        if self.start_point and self.end_point:
            dx = self.end_point[0] - self.start_point[0]
            dy = self.end_point[1] - self.start_point[1]
            distance = math.sqrt(dx**2 + dy**2)
            print(f"Distance: {distance}")
            self.canvas.create_line(self.start_point[0], self.start_point[1], self.end_point[0], self.end_point[1], fill="red")

    def save_coordinates(self):
        with open("coordinates.txt", "w") as file:
            for start, end in self.coordinates:
                file.write(f"({start[0]},{start[1]},{end[0]},{end[1]})\n")
        print("Coordinates saved to coordinates.txt")

    def clear_all(self):
        # 캔버스에서 모든 항목 제거
        self.canvas.delete("all")
        # 좌표 데이터 초기화
        self.coordinates = []
        print("All lines and data cleared")

if __name__ == "__main__":
    root = tk.Tk()
    app = ImageMeasureApp(root)
    root.mainloop()
